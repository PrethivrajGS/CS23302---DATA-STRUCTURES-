#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int prec(char c) {
    if (c == '^')
        return 3;
    else if (c == '/' || c == '*')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return -1;
}

char ass(char c) {
    if (c == '^') {
        return 'R';
    }
    return 'L';
}

void reverse(char* exp) {
    int n = strlen(exp);
    for (int i = 0; i < n / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[n - i - 1];
        exp[n - i - 1] = temp;
    }
}

void intopos(char a[], char r[]) {
    char s[1000];
    int si = -1, ri = 0;
    int len = strlen(a);

    for (int i = 0; i < len; i++) {
        char c = a[i];

        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
            r[ri++] = c;
        } else if (c == '(') {
            s[++si] = c;
        } else if (c == ')') {
            while (si >= 0 && s[si] != '(') {
                r[ri++] = s[si--];
            }
            si--; // Pop '('
        } else {
            while (si >= 0 && (prec(c) < prec(s[si]) || (prec(c) == prec(s[si]) && ass(c) == 'L'))) {
                r[ri++] = s[si--];
            }
            s[++si] = c;
        }
    }

    while (si >= 0) {
        r[ri++] = s[si--];
    }
    r[ri] = '\0'; 
}
void infixToPrefix(char* infix, char* prefix) {
    reverse(infix); 
    for (int i = 0; i < strlen(infix); i++) {
        if (infix[i] == '(') {
            infix[i] = ')';
        } else if (infix[i] == ')') {
            infix[i] = '(';
        }
    }

    char postfix[1000];
    intopos(infix, postfix); 
    reverse(postfix);
    strcpy(prefix, postfix); 
}

int main() {
    char exp[100];
    char prefix[100];

    printf("Enter the expression: ");
    scanf("%s", exp);

    infixToPrefix(exp, prefix);
    printf("Prefix expression: %s\n", prefix);

    return 0;
}
